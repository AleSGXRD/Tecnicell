// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tecnicell.Server.Context;

#nullable disable

namespace Tecnicell.Server.Migrations
{
    [DbContext(typeof(TecnicellContext))]
    partial class TecnicellContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Accessory", b =>
                {
                    b.Property<string>("AccessoryCode")
                        .HasColumnType("character varying")
                        .HasColumnName("accessory_code");

                    b.Property<string>("AccessoryType")
                        .HasColumnType("character varying")
                        .HasColumnName("accessory_type");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.HasKey("AccessoryCode")
                        .HasName("accessory_pkey");

                    b.HasIndex("AccessoryType");

                    b.HasIndex("ImageCode");

                    b.ToTable("accessory", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.AccessoryHistory", b =>
                {
                    b.Property<string>("AccessoryCode")
                        .HasColumnType("character varying")
                        .HasColumnName("accessory_code");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("SaleCode")
                        .HasColumnType("character varying")
                        .HasColumnName("sale_code");

                    b.Property<string>("ToBranch")
                        .HasColumnType("character varying")
                        .HasColumnName("to_branch");

                    b.HasKey("AccessoryCode", "Date")
                        .HasName("accessory_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("SaleCode");

                    b.HasIndex("ToBranch");

                    b.ToTable("accessory_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.AccessoryType", b =>
                {
                    b.Property<string>("AccessoryTypeCode")
                        .HasColumnType("character varying")
                        .HasColumnName("accessory_type_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("AccessoryTypeCode")
                        .HasName("accessory_type_pkey");

                    b.ToTable("accessory_type", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.AccessoryView", b =>
                {
                    b.Property<string>("Available")
                        .HasColumnType("text")
                        .HasColumnName("available");

                    b.Property<string>("Code")
                        .HasColumnType("character varying")
                        .HasColumnName("code");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.ToTable((string)null);

                    b.ToView("accessory_view", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.ActionHistory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("action_history_pkey");

                    b.ToTable("action_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Battery", b =>
                {
                    b.Property<string>("BatteryCode")
                        .HasColumnType("character varying")
                        .HasColumnName("battery_code");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<int?>("Warranty")
                        .HasColumnType("integer")
                        .HasColumnName("warranty");

                    b.HasKey("BatteryCode")
                        .HasName("battery_pkey");

                    b.HasIndex("Brand");

                    b.HasIndex("ImageCode");

                    b.ToTable("battery", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.BatteryBrand", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.HasKey("Name")
                        .HasName("battery_brand_pkey");

                    b.ToTable("battery_brand", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.BatteryHistory", b =>
                {
                    b.Property<string>("BatteryCode")
                        .HasColumnType("character varying")
                        .HasColumnName("battery_code");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("SaleCode")
                        .HasColumnType("character varying")
                        .HasColumnName("sale_code");

                    b.Property<string>("ToBranch")
                        .HasColumnType("character varying")
                        .HasColumnName("to_branch");

                    b.HasKey("BatteryCode", "Date")
                        .HasName("battery_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("SaleCode");

                    b.HasIndex("ToBranch");

                    b.ToTable("battery_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.BatteryView", b =>
                {
                    b.Property<string>("Available")
                        .HasColumnType("text")
                        .HasColumnName("available");

                    b.Property<string>("Code")
                        .HasColumnType("character varying")
                        .HasColumnName("code");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.ToTable((string)null);

                    b.ToView("battery_view", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Branch", b =>
                {
                    b.Property<string>("BranchCode")
                        .HasColumnType("character varying")
                        .HasColumnName("branch_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("BranchCode")
                        .HasName("branch_pkey");

                    b.ToTable("branch", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnType("character varying")
                        .HasColumnName("currency_code");

                    b.Property<string>("CurrencyName")
                        .HasColumnType("character varying")
                        .HasColumnName("currency_name");

                    b.HasKey("CurrencyCode")
                        .HasName("currency_pkey");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Image", b =>
                {
                    b.Property<string>("Imagecode")
                        .HasColumnType("character varying")
                        .HasColumnName("imagecode");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea")
                        .HasColumnName("file");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Imagecode")
                        .HasName("image_pkey");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Phone", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.HasKey("Imei")
                        .HasName("phone_pkey");

                    b.HasIndex("Brand");

                    b.HasIndex("ImageCode");

                    b.ToTable("phone", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneBrand", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.HasKey("Name")
                        .HasName("phone_brand_pkey");

                    b.ToTable("phone_brand", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneHistory", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("SaleCode")
                        .HasColumnType("character varying")
                        .HasColumnName("sale_code");

                    b.Property<string>("ToBranch")
                        .HasColumnType("character varying")
                        .HasColumnName("to_branch");

                    b.HasKey("Imei", "Date")
                        .HasName("phone_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("SaleCode");

                    b.HasIndex("ToBranch");

                    b.ToTable("phone_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneRepair", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<string>("CustomerId")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_number");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Imei")
                        .HasName("phone_repair_pkey");

                    b.HasIndex("Brand");

                    b.HasIndex("ImageCode");

                    b.ToTable("phone_repair", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneRepairHistory", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("SaleCode")
                        .HasColumnType("character varying")
                        .HasColumnName("sale_code");

                    b.Property<string>("ToBranch")
                        .HasColumnType("character varying")
                        .HasColumnName("to_branch");

                    b.HasKey("Imei", "Date")
                        .HasName("phone_repair_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("SaleCode");

                    b.HasIndex("ToBranch");

                    b.ToTable("phone_repair_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneRepairView", b =>
                {
                    b.Property<string>("ActionDescription")
                        .HasColumnType("text")
                        .HasColumnName("action_description");

                    b.Property<string>("CurrentState")
                        .HasColumnType("text")
                        .HasColumnName("current_state");

                    b.Property<string>("CustomerId")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_number");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.ToTable((string)null);

                    b.ToView("phone_repair_view", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneView", b =>
                {
                    b.Property<string>("ActionDescription")
                        .HasColumnType("text")
                        .HasColumnName("action_description");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<string>("CurrentState")
                        .HasColumnType("text")
                        .HasColumnName("current_state");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.ToTable((string)null);

                    b.ToView("phone_view", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Role", b =>
                {
                    b.Property<string>("RoleCode")
                        .HasColumnType("character varying")
                        .HasColumnName("role_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("RoleCode")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Sale", b =>
                {
                    b.Property<string>("SaleCode")
                        .HasColumnType("character varying")
                        .HasColumnName("sale_code");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("character varying")
                        .HasColumnName("currency_code");

                    b.Property<DateTime?>("Warranty")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("warranty");

                    b.HasKey("SaleCode")
                        .HasName("sale_pkey");

                    b.HasIndex("CurrencyCode");

                    b.ToTable("sale", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Screen", b =>
                {
                    b.Property<string>("ScreenCode")
                        .HasColumnType("character varying")
                        .HasColumnName("screen_code");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric")
                        .HasColumnName("height");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<int?>("Warranty")
                        .HasColumnType("integer")
                        .HasColumnName("warranty");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric")
                        .HasColumnName("width");

                    b.HasKey("ScreenCode")
                        .HasName("screen_pkey");

                    b.HasIndex("Brand");

                    b.HasIndex("ImageCode");

                    b.ToTable("screen", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.ScreenHistory", b =>
                {
                    b.Property<string>("ScreenCode")
                        .HasColumnType("character varying")
                        .HasColumnName("screen_code");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("SaleCode")
                        .HasColumnType("character varying")
                        .HasColumnName("sale_code");

                    b.Property<string>("ToBranch")
                        .HasColumnType("character varying")
                        .HasColumnName("to_branch");

                    b.HasKey("ScreenCode", "Date")
                        .HasName("screen_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("SaleCode");

                    b.HasIndex("ToBranch");

                    b.ToTable("screen_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.ScreenView", b =>
                {
                    b.Property<string>("Available")
                        .HasColumnType("text")
                        .HasColumnName("available");

                    b.Property<string>("Code")
                        .HasColumnType("character varying")
                        .HasColumnName("code");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<long?>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<string>("Type")
                        .HasColumnType("character varying")
                        .HasColumnName("type");

                    b.ToTable((string)null);

                    b.ToView("screen_view", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.UserAccount", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("character varying")
                        .HasColumnName("user_code");

                    b.Property<string>("ImageCode")
                        .HasColumnType("character varying")
                        .HasColumnName("image_code");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasColumnType("character varying")
                        .HasColumnName("role");

                    b.HasKey("UserCode")
                        .HasName("user_account_pkey");

                    b.HasIndex("ImageCode");

                    b.HasIndex("Role");

                    b.ToTable("user_account", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Accessory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.AccessoryType", "AccessoryTypeNavigation")
                        .WithMany("Accessories")
                        .HasForeignKey("AccessoryType")
                        .HasConstraintName("accessory_accessory_type_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Image", "ImageCodeNavigation")
                        .WithMany("Accessories")
                        .HasForeignKey("ImageCode")
                        .HasConstraintName("accessory_image_fkey");

                    b.Navigation("AccessoryTypeNavigation");

                    b.Navigation("ImageCodeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.AccessoryHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.Accessory", "AccessoryCodeNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("AccessoryCode")
                        .IsRequired()
                        .HasConstraintName("accessory_history_accessory_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("accessory_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Sale", "SaleCodeNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("SaleCode")
                        .HasConstraintName("accessory_history_sale_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Branch", "ToBranchNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("ToBranch")
                        .HasConstraintName("accessory_history_to_branch_fkey");

                    b.Navigation("AccessoryCodeNavigation");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("SaleCodeNavigation");

                    b.Navigation("ToBranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Battery", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.BatteryBrand", "BrandNavigation")
                        .WithMany("Batteries")
                        .HasForeignKey("Brand")
                        .HasConstraintName("battery_brand_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Image", "ImageCodeNavigation")
                        .WithMany("Batteries")
                        .HasForeignKey("ImageCode")
                        .HasConstraintName("battery_image_code_fkey");

                    b.Navigation("BrandNavigation");

                    b.Navigation("ImageCodeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.BatteryHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("battery_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Battery", "BatteryCodeNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("BatteryCode")
                        .IsRequired()
                        .HasConstraintName("battery_history_battery_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Sale", "SaleCodeNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("SaleCode")
                        .HasConstraintName("battery_history_sale_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Branch", "ToBranchNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("ToBranch")
                        .HasConstraintName("battery_history_to_branch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("BatteryCodeNavigation");

                    b.Navigation("SaleCodeNavigation");

                    b.Navigation("ToBranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Phone", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.PhoneBrand", "BrandNavigation")
                        .WithMany("Phones")
                        .HasForeignKey("Brand")
                        .HasConstraintName("phone_brand_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Image", "ImageCodeNavigation")
                        .WithMany("Phones")
                        .HasForeignKey("ImageCode")
                        .HasConstraintName("phone_image_fkey");

                    b.Navigation("BrandNavigation");

                    b.Navigation("ImageCodeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("phone_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Phone", "ImeiNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("Imei")
                        .IsRequired()
                        .HasConstraintName("phone_history_imei_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Sale", "SaleCodeNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("SaleCode")
                        .HasConstraintName("phone_history_sale_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Branch", "ToBranchNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("ToBranch")
                        .HasConstraintName("phone_history_to_branch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("ImeiNavigation");

                    b.Navigation("SaleCodeNavigation");

                    b.Navigation("ToBranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneRepair", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.PhoneBrand", "BrandNavigation")
                        .WithMany("PhoneRepairs")
                        .HasForeignKey("Brand")
                        .HasConstraintName("phone_repair_brand_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Image", "ImageCodeNavigation")
                        .WithMany("PhoneRepairs")
                        .HasForeignKey("ImageCode")
                        .HasConstraintName("phone_repair_image_fkey");

                    b.Navigation("BrandNavigation");

                    b.Navigation("ImageCodeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneRepairHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("phone_repair_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.PhoneRepair", "ImeiNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("Imei")
                        .IsRequired()
                        .HasConstraintName("phone_repair_history_imei_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Sale", "SaleCodeNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("SaleCode")
                        .HasConstraintName("phone_repair_history_sale_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Branch", "ToBranchNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("ToBranch")
                        .HasConstraintName("phone_repair_history_to_branch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("ImeiNavigation");

                    b.Navigation("SaleCodeNavigation");

                    b.Navigation("ToBranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Sale", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.Currency", "CurrencyCodeNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("sale_currency_code_fkey");

                    b.Navigation("CurrencyCodeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Screen", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.PhoneBrand", "BrandNavigation")
                        .WithMany("Screens")
                        .HasForeignKey("Brand")
                        .HasConstraintName("screen_brand_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Image", "ImageCodeNavigation")
                        .WithMany("Screens")
                        .HasForeignKey("ImageCode")
                        .HasConstraintName("screen_image_fkey");

                    b.Navigation("BrandNavigation");

                    b.Navigation("ImageCodeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.ScreenHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("screen_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Sale", "SaleCodeNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("SaleCode")
                        .HasConstraintName("screen_history_sale_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Screen", "ScreenCodeNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("ScreenCode")
                        .IsRequired()
                        .HasConstraintName("screen_history_screen_code_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Branch", "ToBranchNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("ToBranch")
                        .HasConstraintName("screen_history_to_branch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("SaleCodeNavigation");

                    b.Navigation("ScreenCodeNavigation");

                    b.Navigation("ToBranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.UserAccount", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Entity.Image", "ImageCodeNavigation")
                        .WithMany("UserAccounts")
                        .HasForeignKey("ImageCode")
                        .HasConstraintName("user_account_image_fkey");

                    b.HasOne("Tecnicell.Server.Models.Entity.Role", "RoleNavigation")
                        .WithMany("UserAccounts")
                        .HasForeignKey("Role")
                        .HasConstraintName("user_account_role_fkey");

                    b.Navigation("ImageCodeNavigation");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Accessory", b =>
                {
                    b.Navigation("AccessoryHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.AccessoryType", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.ActionHistory", b =>
                {
                    b.Navigation("AccessoryHistories");

                    b.Navigation("BatteryHistories");

                    b.Navigation("PhoneHistories");

                    b.Navigation("PhoneRepairHistories");

                    b.Navigation("ScreenHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Battery", b =>
                {
                    b.Navigation("BatteryHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.BatteryBrand", b =>
                {
                    b.Navigation("Batteries");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Branch", b =>
                {
                    b.Navigation("AccessoryHistories");

                    b.Navigation("BatteryHistories");

                    b.Navigation("PhoneHistories");

                    b.Navigation("PhoneRepairHistories");

                    b.Navigation("ScreenHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Currency", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Image", b =>
                {
                    b.Navigation("Accessories");

                    b.Navigation("Batteries");

                    b.Navigation("PhoneRepairs");

                    b.Navigation("Phones");

                    b.Navigation("Screens");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Phone", b =>
                {
                    b.Navigation("PhoneHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneBrand", b =>
                {
                    b.Navigation("PhoneRepairs");

                    b.Navigation("Phones");

                    b.Navigation("Screens");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.PhoneRepair", b =>
                {
                    b.Navigation("PhoneRepairHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Role", b =>
                {
                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Sale", b =>
                {
                    b.Navigation("AccessoryHistories");

                    b.Navigation("BatteryHistories");

                    b.Navigation("PhoneHistories");

                    b.Navigation("PhoneRepairHistories");

                    b.Navigation("ScreenHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Entity.Screen", b =>
                {
                    b.Navigation("ScreenHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
