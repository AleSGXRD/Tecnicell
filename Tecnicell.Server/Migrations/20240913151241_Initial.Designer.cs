// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tecnicell.Server.Context;

#nullable disable

namespace Tecnicell.Server.Migrations
{
    [DbContext(typeof(TecnicellContext))]
    [Migration("20240913151241_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tecnicell.Server.Models.Accessory", b =>
                {
                    b.Property<string>("Accessorycode")
                        .HasColumnType("character varying")
                        .HasColumnName("accessorycode");

                    b.Property<string>("AccessoryType")
                        .HasColumnType("character varying")
                        .HasColumnName("accessory_type");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.HasKey("Accessorycode")
                        .HasName("accessory_pkey");

                    b.HasIndex("AccessoryType");

                    b.ToTable("accessory", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.AccessoryHistory", b =>
                {
                    b.Property<string>("Accessorycode")
                        .HasColumnType("character varying")
                        .HasColumnName("accessorycode");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Salecode")
                        .HasColumnType("character varying")
                        .HasColumnName("salecode");

                    b.Property<string>("Tobranch")
                        .HasColumnType("character varying")
                        .HasColumnName("tobranch");

                    b.HasKey("Accessorycode", "Date")
                        .HasName("accessory_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("Salecode");

                    b.HasIndex("Tobranch");

                    b.ToTable("accessory_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.AccessoryType", b =>
                {
                    b.Property<string>("Accessorytypecode")
                        .HasColumnType("character varying")
                        .HasColumnName("accessorytypecode");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Accessorytypecode")
                        .HasName("accessory_type_pkey");

                    b.ToTable("accessory_type", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.ActionHistory", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("action_history_pkey");

                    b.ToTable("action_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Battery", b =>
                {
                    b.Property<string>("Batterycode")
                        .HasColumnType("character varying")
                        .HasColumnName("batterycode");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<int?>("Warranty")
                        .HasColumnType("integer")
                        .HasColumnName("warranty");

                    b.HasKey("Batterycode")
                        .HasName("battery_pkey");

                    b.HasIndex("Brand");

                    b.ToTable("battery", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.BatteryBrand", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.HasKey("Name")
                        .HasName("battery_brand_pkey");

                    b.ToTable("battery_brand", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.BatteryHistory", b =>
                {
                    b.Property<string>("Batterycode")
                        .HasColumnType("character varying")
                        .HasColumnName("batterycode");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Salecode")
                        .HasColumnType("character varying")
                        .HasColumnName("salecode");

                    b.Property<string>("Tobranch")
                        .HasColumnType("character varying")
                        .HasColumnName("tobranch");

                    b.HasKey("Batterycode", "Date")
                        .HasName("battery_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("Salecode");

                    b.HasIndex("Tobranch");

                    b.ToTable("battery_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Branch", b =>
                {
                    b.Property<string>("Branchcode")
                        .HasColumnType("character varying")
                        .HasColumnName("branchcode");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Branchcode")
                        .HasName("branch_pkey");

                    b.ToTable("branch", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Currency", b =>
                {
                    b.Property<string>("Currencycode")
                        .HasColumnType("character varying")
                        .HasColumnName("currencycode");

                    b.Property<string>("Currencyname")
                        .HasColumnType("character varying")
                        .HasColumnName("currencyname");

                    b.HasKey("Currencycode")
                        .HasName("currency_pkey");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Image", b =>
                {
                    b.Property<string>("Imagecode")
                        .HasColumnType("character varying")
                        .HasColumnName("imagecode");

                    b.Property<byte[]>("File")
                        .HasColumnType("bytea")
                        .HasColumnName("file");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Imagecode")
                        .HasName("image_pkey");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Phone", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.HasKey("Imei")
                        .HasName("phone_pkey");

                    b.HasIndex("Brand");

                    b.ToTable("phone", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneBrand", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.HasKey("Name")
                        .HasName("phone_brand_pkey");

                    b.ToTable("phone_brand", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneHistory", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Salecode")
                        .HasColumnType("character varying")
                        .HasColumnName("salecode");

                    b.Property<string>("Tobranch")
                        .HasColumnType("character varying")
                        .HasColumnName("tobranch");

                    b.HasKey("Imei", "Date")
                        .HasName("phone_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("Salecode");

                    b.HasIndex("Tobranch");

                    b.ToTable("phone_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneRepair", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<string>("CustomerId")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerName")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_name");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("customer_number");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Imei")
                        .HasName("phone_repair_pkey");

                    b.HasIndex("Brand");

                    b.ToTable("phone_repair", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneRepairHistory", b =>
                {
                    b.Property<string>("Imei")
                        .HasColumnType("character varying")
                        .HasColumnName("imei");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<string>("Salecode")
                        .HasColumnType("character varying")
                        .HasColumnName("salecode");

                    b.Property<string>("Tobranch")
                        .HasColumnType("character varying")
                        .HasColumnName("tobranch");

                    b.HasKey("Imei", "Date")
                        .HasName("phone_repair_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("Salecode");

                    b.HasIndex("Tobranch");

                    b.ToTable("phone_repair_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Role", b =>
                {
                    b.Property<string>("Rolecode")
                        .HasColumnType("character varying")
                        .HasColumnName("rolecode");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Rolecode")
                        .HasName("role_pkey");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Sale", b =>
                {
                    b.Property<string>("Salecode")
                        .HasColumnType("character varying")
                        .HasColumnName("salecode");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("numeric")
                        .HasColumnName("cost");

                    b.Property<string>("Currencycode")
                        .HasColumnType("character varying")
                        .HasColumnName("currencycode");

                    b.Property<DateTime?>("Warranty")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("warranty");

                    b.HasKey("Salecode")
                        .HasName("sale_pkey");

                    b.HasIndex("Currencycode");

                    b.ToTable("sale", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Screen", b =>
                {
                    b.Property<string>("Screencode")
                        .HasColumnType("character varying")
                        .HasColumnName("screencode");

                    b.Property<string>("Brand")
                        .HasColumnType("character varying")
                        .HasColumnName("brand");

                    b.Property<decimal?>("Height")
                        .HasColumnType("numeric")
                        .HasColumnName("height");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal?>("SalePrice")
                        .HasColumnType("numeric")
                        .HasColumnName("sale_price");

                    b.Property<int?>("Warranty")
                        .HasColumnType("integer")
                        .HasColumnName("warranty");

                    b.Property<decimal?>("Width")
                        .HasColumnType("numeric")
                        .HasColumnName("width");

                    b.HasKey("Screencode")
                        .HasName("screen_pkey");

                    b.HasIndex("Brand");

                    b.ToTable("screen", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.ScreenHistory", b =>
                {
                    b.Property<string>("Screencode")
                        .HasColumnType("character varying")
                        .HasColumnName("screencode");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<string>("ActionHistory")
                        .HasColumnType("character varying")
                        .HasColumnName("action_history");

                    b.Property<string>("Description")
                        .HasColumnType("character varying")
                        .HasColumnName("description");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Salecode")
                        .HasColumnType("character varying")
                        .HasColumnName("salecode");

                    b.Property<string>("Tobranch")
                        .HasColumnType("character varying")
                        .HasColumnName("tobranch");

                    b.HasKey("Screencode", "Date")
                        .HasName("screen_history_pkey");

                    b.HasIndex("ActionHistory");

                    b.HasIndex("Salecode");

                    b.HasIndex("Tobranch");

                    b.ToTable("screen_history", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.UserAccount", b =>
                {
                    b.Property<string>("Usercode")
                        .HasColumnType("character varying")
                        .HasColumnName("usercode");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasColumnType("character varying")
                        .HasColumnName("role");

                    b.HasKey("Usercode")
                        .HasName("user_account_pkey");

                    b.HasIndex("Role");

                    b.ToTable("user_account", (string)null);
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Accessory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.AccessoryType", "AccessoryTypeNavigation")
                        .WithMany("Accessories")
                        .HasForeignKey("AccessoryType")
                        .HasConstraintName("accessory_accessory_type_fkey");

                    b.Navigation("AccessoryTypeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.AccessoryHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Accessory", "AccessorycodeNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("Accessorycode")
                        .IsRequired()
                        .HasConstraintName("accessory_history_accessorycode_fkey");

                    b.HasOne("Tecnicell.Server.Models.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("accessory_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Sale", "SalecodeNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("Salecode")
                        .HasConstraintName("accessory_history_salecode_fkey");

                    b.HasOne("Tecnicell.Server.Models.Branch", "TobranchNavigation")
                        .WithMany("AccessoryHistories")
                        .HasForeignKey("Tobranch")
                        .HasConstraintName("accessory_history_tobranch_fkey");

                    b.Navigation("AccessorycodeNavigation");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("SalecodeNavigation");

                    b.Navigation("TobranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Battery", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.BatteryBrand", "BrandNavigation")
                        .WithMany("Batteries")
                        .HasForeignKey("Brand")
                        .HasConstraintName("battery_brand_fkey");

                    b.Navigation("BrandNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.BatteryHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("battery_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Battery", "BatterycodeNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("Batterycode")
                        .IsRequired()
                        .HasConstraintName("battery_history_batterycode_fkey");

                    b.HasOne("Tecnicell.Server.Models.Sale", "SalecodeNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("Salecode")
                        .HasConstraintName("battery_history_salecode_fkey");

                    b.HasOne("Tecnicell.Server.Models.Branch", "TobranchNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("Tobranch")
                        .HasConstraintName("battery_history_tobranch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("BatterycodeNavigation");

                    b.Navigation("SalecodeNavigation");

                    b.Navigation("TobranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Phone", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.PhoneBrand", "BrandNavigation")
                        .WithMany("Phones")
                        .HasForeignKey("Brand")
                        .HasConstraintName("phone_brand_fkey");

                    b.Navigation("BrandNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("phone_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Phone", "ImeiNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("Imei")
                        .IsRequired()
                        .HasConstraintName("phone_history_imei_fkey");

                    b.HasOne("Tecnicell.Server.Models.Sale", "SalecodeNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("Salecode")
                        .HasConstraintName("phone_history_salecode_fkey");

                    b.HasOne("Tecnicell.Server.Models.Branch", "TobranchNavigation")
                        .WithMany("PhoneHistories")
                        .HasForeignKey("Tobranch")
                        .HasConstraintName("phone_history_tobranch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("ImeiNavigation");

                    b.Navigation("SalecodeNavigation");

                    b.Navigation("TobranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneRepair", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.PhoneBrand", "BrandNavigation")
                        .WithMany("PhoneRepairs")
                        .HasForeignKey("Brand")
                        .HasConstraintName("phone_repair_brand_fkey");

                    b.Navigation("BrandNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneRepairHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("phone_repair_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.PhoneRepair", "ImeiNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("Imei")
                        .IsRequired()
                        .HasConstraintName("phone_repair_history_imei_fkey");

                    b.HasOne("Tecnicell.Server.Models.Sale", "SalecodeNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("Salecode")
                        .HasConstraintName("phone_repair_history_salecode_fkey");

                    b.HasOne("Tecnicell.Server.Models.Branch", "TobranchNavigation")
                        .WithMany("PhoneRepairHistories")
                        .HasForeignKey("Tobranch")
                        .HasConstraintName("phone_repair_history_tobranch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("ImeiNavigation");

                    b.Navigation("SalecodeNavigation");

                    b.Navigation("TobranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Sale", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Currency", "CurrencycodeNavigation")
                        .WithMany("Sales")
                        .HasForeignKey("Currencycode")
                        .HasConstraintName("sale_currencycode_fkey");

                    b.Navigation("CurrencycodeNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Screen", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.PhoneBrand", "BrandNavigation")
                        .WithMany("Screens")
                        .HasForeignKey("Brand")
                        .HasConstraintName("screen_brand_fkey");

                    b.Navigation("BrandNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.ScreenHistory", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.ActionHistory", "ActionHistoryNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("ActionHistory")
                        .HasConstraintName("screen_history_action_history_fkey");

                    b.HasOne("Tecnicell.Server.Models.Sale", "SalecodeNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("Salecode")
                        .HasConstraintName("screen_history_salecode_fkey");

                    b.HasOne("Tecnicell.Server.Models.Screen", "ScreencodeNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("Screencode")
                        .IsRequired()
                        .HasConstraintName("screen_history_screencode_fkey");

                    b.HasOne("Tecnicell.Server.Models.Branch", "TobranchNavigation")
                        .WithMany("ScreenHistories")
                        .HasForeignKey("Tobranch")
                        .HasConstraintName("screen_history_tobranch_fkey");

                    b.Navigation("ActionHistoryNavigation");

                    b.Navigation("SalecodeNavigation");

                    b.Navigation("ScreencodeNavigation");

                    b.Navigation("TobranchNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.UserAccount", b =>
                {
                    b.HasOne("Tecnicell.Server.Models.Role", "RoleNavigation")
                        .WithMany("UserAccounts")
                        .HasForeignKey("Role")
                        .HasConstraintName("user_account_role_fkey");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Accessory", b =>
                {
                    b.Navigation("AccessoryHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.AccessoryType", b =>
                {
                    b.Navigation("Accessories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.ActionHistory", b =>
                {
                    b.Navigation("AccessoryHistories");

                    b.Navigation("BatteryHistories");

                    b.Navigation("PhoneHistories");

                    b.Navigation("PhoneRepairHistories");

                    b.Navigation("ScreenHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Battery", b =>
                {
                    b.Navigation("BatteryHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.BatteryBrand", b =>
                {
                    b.Navigation("Batteries");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Branch", b =>
                {
                    b.Navigation("AccessoryHistories");

                    b.Navigation("BatteryHistories");

                    b.Navigation("PhoneHistories");

                    b.Navigation("PhoneRepairHistories");

                    b.Navigation("ScreenHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Currency", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Phone", b =>
                {
                    b.Navigation("PhoneHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneBrand", b =>
                {
                    b.Navigation("PhoneRepairs");

                    b.Navigation("Phones");

                    b.Navigation("Screens");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.PhoneRepair", b =>
                {
                    b.Navigation("PhoneRepairHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Role", b =>
                {
                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Sale", b =>
                {
                    b.Navigation("AccessoryHistories");

                    b.Navigation("BatteryHistories");

                    b.Navigation("PhoneHistories");

                    b.Navigation("PhoneRepairHistories");

                    b.Navigation("ScreenHistories");
                });

            modelBuilder.Entity("Tecnicell.Server.Models.Screen", b =>
                {
                    b.Navigation("ScreenHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
